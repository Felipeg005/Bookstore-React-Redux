{"version":3,"sources":["redux/books/books.js","redux/configureStore.js","components/add-books.js","components/Book.js","components/books-list.js","pages/Home.js","pages/Categories-page.js","components/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["ADD_BOOK","REMOVE_BOOK","initialState","JSON","parse","localStorage","getItem","reducer","state","action","storageState","setItem","stringify","type","newState","payload","filter","book","id","Number","bookId","i","length","combineReducers","booksReducer","store","createStore","applyMiddleware","logger","AddBooks","dispatch","useDispatch","className","onSubmit","e","preventDefault","bookStorage","newBook","title","target","value","author","required","maxLength","placeholder","NewBook","props","bookTitle","bookAuthor","bookClassName","onClick","removeThisBook","BookList","map","Home","React","Component","CategoriesPage","Nav","this","class","to","App","configureStore","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a3beee2.chunk.js","sourcesContent":["// Actions\r\nconst ADD_BOOK = 'bookStore/books/ADD_BOOK';\r\nconst REMOVE_BOOK = 'bookStore/books/REMOVE_BOOK';\r\n\r\nconst initialState = JSON.parse(localStorage.getItem('bookStorage'));\r\n\r\n// Reducer\r\nconst reducer = (state = initialState, action) => {\r\n  const storageState = () => {\r\n    if (JSON.parse(localStorage.getItem('bookStorage'))) {\r\n      state = JSON.parse(localStorage.getItem('bookStorage'));\r\n      localStorage.setItem('bookStorage', JSON.stringify(state));\r\n    } else {\r\n      state = [];\r\n    }\r\n    return state;\r\n  };\r\n\r\n  switch (action.type) {\r\n    case ADD_BOOK: {\r\n      storageState();\r\n      const newState = [...state, action.payload];\r\n      localStorage.setItem('bookStorage', JSON.stringify(newState));\r\n      return (\r\n        newState\r\n      );\r\n    }\r\n    /*\r\n    return a new state object in which the books array will contain a new book object,\r\n    passed by action.payload.\r\n    Remember -  you MUSN'T mutate the state. You have to return a new state object - i.e.:\r\n    return [ ...state, action.payload];\r\n    */\r\n    case REMOVE_BOOK: {\r\n      storageState();\r\n      const newState = state.filter((book) => book.id !== Number(action.payload.bookId));\r\n      for (let i = 0; i < newState.length; i += 1) {\r\n        newState[i].id = i + 1;\r\n      }\r\n      localStorage.setItem('bookStorage', JSON.stringify(newState));\r\n      return newState;\r\n    }\r\n    /*\r\n    use ES6 filter() method to create a new array, which will not contain the book you\r\n    want to remove from the store (filter by the id key - i.e.:\r\n    return state.filter(book => book.id !== id);\r\n    */\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\n// Action Creators\r\n\r\nexport const addBook = (payload) => ({\r\n  type: ADD_BOOK,\r\n  payload,\r\n});\r\n\r\nexport const removeBooks = (payload) => ({\r\n  type: REMOVE_BOOK,\r\n  payload,\r\n});","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport booksReducer from './books/books';\r\n\r\nconst reducer = combineReducers({\r\n  booksReducer,\r\n  // additional reducers could be added here\r\n});\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  applyMiddleware(logger),\r\n);\r\n\r\nexport default store;","import { useDispatch } from 'react-redux';\r\nimport React from 'react';\r\nimport { addBook } from '../redux/books/books';\r\n\r\nconst AddBooks = () => {\r\n  const dispatch = useDispatch();\r\n  const submitBookToStore = (e) => {\r\n    e.preventDefault();\r\n    let bookStorage = JSON.parse(localStorage.getItem('bookStorage'));\r\n    if (!bookStorage) {\r\n      bookStorage = [];\r\n    }\r\n    const newBook = {\r\n      id: bookStorage.length + 1,\r\n      title: e.target[0].value,\r\n      author: e.target[1].value,\r\n    };\r\n    // dispatch an action and pass it the newBook object (your action's payload)\r\n    dispatch(addBook(newBook));\r\n  };\r\n  return (\r\n    <>\r\n    <h2 className=\"form-title\">Add New</h2>\r\n    <form className=\"form\" onSubmit={submitBookToStore}>\r\n      <input type=\"text\" required maxLength=\"30\" placeholder=\"Title\"></input>\r\n      <input type=\"text\" required maxLength=\"30\" placeholder=\"Author\"></input>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddBooks;","import { useDispatch } from 'react-redux';\r\nimport { removeBooks } from '../redux/books/books';\r\n\r\nconst NewBook = (props) => {\r\n  const {\r\n    bookId, bookTitle, bookAuthor, bookClassName,\r\n  } = props;\r\n  const dispatch = useDispatch();\r\n  const removeBook = (e) => {\r\n    const removeThisBook = {\r\n      bookId: e.target.id,\r\n    };\r\n    dispatch(removeBooks(removeThisBook));\r\n  };\r\n\r\n  return (\r\n    <li id={bookId} className={bookClassName}>\r\n      <h2 className=\"books-title\">{bookTitle}</h2>\r\n      <h3 className=\"books-title\">{bookAuthor}</h3>\r\n      <button id={bookId} className=\"delete-button\" onClick={removeBook}>Delete</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NewBook;","import React from 'react';\r\nimport NewBook from './Book';\r\n\r\nconst BookList = () => {\r\n  let bookStorage = JSON.parse(localStorage.getItem('bookStorage'));\r\n  if (!bookStorage) {\r\n    bookStorage = [];\r\n  }\r\n\r\n  const giveLiClass = (id) => {\r\n    if (id % 2 === 0) {\r\n      return 'book-container';\r\n    }\r\n    return 'book-container-white';\r\n  };\r\n\r\n  return (\r\n    <div className=\"list-container\">\r\n    <ul className=\"list-elements\">\r\n    {bookStorage.map((book) => (\r\n      <NewBook\r\n        key={book.id}\r\n        bookId={book.id}\r\n        bookTitle={book.title}\r\n        bookAuthor={book.author}\r\n        bookClassName={giveLiClass(book.id)}\r\n      />\r\n    ))}\r\n    </ul>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default BookList;","import React from 'react';\r\nimport AddBooks from '../components/add-books';\r\nimport BookList from '../components/books-list';\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n      <BookList />\r\n      <AddBooks />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nclass CategoriesPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n      <div>Under Construction</div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CategoriesPage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Nav extends React.Component {\r\n  render() {\r\n    return (\r\n      <nav className={this.props.class}>\r\n        <h1 className=\"logo\">BookStore</h1>\r\n        <ul className='menu-container'>\r\n          <Link to=\"/Bookstore-React-Redux/\">\r\n            <li className=\"menu-li\">Home</li>\r\n          </Link>\r\n          <Link to=\"/Bookstore-React-Redux/categories\">\r\n            <li className=\"menu-li\">Categories</li>\r\n          </Link>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;","import './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/configureStore';\nimport Home from './pages/Home';\nimport CategoriesPage from './pages/Categories-page';\nimport Nav from './components/Nav';\n\nfunction App() {\n  return (\n    <Provider store={configureStore}>\n      <Router>\n        < Nav class='nav-menu'/>\n        <Switch>\n          <Route path=\"/Bookstore-React-Redux/\" exact component={Home}></Route>\n          <Route path=\"/Bookstore-React-Redux/categories\" component={CategoriesPage}></Route>\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}